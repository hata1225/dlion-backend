// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
}

// Post
// 投稿
model Post {
  postId      String    @id @default(uuid()) @map("post_id")
  title       String?   @map("title") @db.VarChar(50)
  description String?   @map("description") @db.VarChar(1000)
  user        User      @relation(fields: [userId], references: [userId])
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  favorites     Favorite[]
  postFilePaths PostFilePath[]

  @@map("posts")
}

// User
// ユーザー情報
model User {
  userId      String    @id @default(uuid()) @map("user_id")
  email       String    @unique @db.VarChar(255)
  name        String    @db.VarChar(50)
  accountName String    @unique @map("account_name") @db.VarChar(20)
  googleId    String?   @unique @map("google_id")
  isAdmin     Boolean   @default(false) @map("is_admin")
  isPrivate   Boolean   @default(false) @map("is_private")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  posts     Post[]
  favorites Favorite[]
  filePaths FilePath[]

  @@map("users")
}

// PostLike
// 投稿に対するいいね
model Favorite {
  favoriteId String    @id @default(uuid()) @map("favorite_id")
  post       Post      @relation(fields: [postId], references: [postId])
  postId     String    @map("post_id") // 投稿ID
  user       User      @relation(fields: [userId], references: [userId])
  userId     String    @map("user_id") // ユーザーID
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("favorites")
}

// PostFilePath
// 投稿とファイルパスの中間テーブル
model PostFilePath {
  postFilePathId String    @id @default(uuid()) @map("post_file_path_id")
  post           Post      @relation(fields: [postId], references: [postId])
  postId         String    @map("post_id") // 投稿ID
  filePath       FilePath  @relation(fields: [filePathId], references: [filePathId])
  filePathId     String    @map("file_path_id") // ファイルパスID
  fileType       String    @map("file_type") // ファイルタイプ, "image" | "video" | "audio" | "pdf" | "other"
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  @@map("post_file_paths")
}

// FilePath
// ファイルパス
model FilePath {
  filePathId String    @id @default(uuid()) @map("file_path_id")
  filePath   String    @map("file_path") // ファイルパス
  user       User      @relation(fields: [userId], references: [userId])
  userId     String    @map("user_id") // ユーザーID
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  postFilePaths PostFilePath[]

  @@map("file_paths")
}
